// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// add friends / saved contacts logic after payment setup

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum transaction_status {
  PROCESSING
  FAILED
  SUCCESS
}

enum bank_operation {
  TOPUP
  WITHDRAWAL
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String? // optional because of OAuth
  phone String? @unique
  image String?
  emailVerified DateTime? @map("email_verified")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  wallet wallets?
  magic_token magic_links?
  bank_txns bank_transactions[]
  sent_txns p2p_transactions[] @relation(name: "senderRelation")
  receive_txns p2p_transactions[] @relation(name: "receiverRelation")
  favorites Favorites[] @relation(name: "mainUser")
  favorited_by Favorites[] @relation(name: "favUser")
  accounts Account[]
  sessions Session[]
  sending_user RecentRecipients[] @relation(name: "senderUser")
  receiving_user RecentRecipients[] @relation(name: "receiverUser")


  @@map("users")
}

model bank_transactions {
  id BigInt @id @default(autoincrement())
  user_id Int
  token String @unique
  provider String
  operation_type bank_operation
  amount Int @default(0)
  status transaction_status @default(PROCESSING)
  created_at DateTime @default(now())
  user User @relation(fields: [user_id], references: [id])
}

model p2p_transactions {
  id BigInt @id @default(autoincrement())
  sender_id Int
  receiver_id Int
  amount Int @default(0)
  sender_user User @relation(name: "senderRelation", fields: [sender_id], references: [id])
  receiver_user User @relation(name: "receiverRelation", fields: [receiver_id], references: [id])
}

model wallets {
  id Int @id @default(autoincrement())
  user_id Int @unique
  balance Int @default(0)
  updated_at DateTime @updatedAt
  user User @relation(fields: [user_id], references: [id])
}

model magic_links {
  id Int @id @default(autoincrement())
  user_id Int @unique
  token String @unique
  expires_at DateTime
  user User @relation(fields: [user_id], references: [id])
}

model Account {
  userId            Int  @map("user_id")
  type              String
  provider          String
  providerAccountId String @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       Int @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("session")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
  @@map("verification_token")
}

model Favorites {
  id Int @id @default(autoincrement())
  user_id Int 
  fav_user_id Int
  user User @relation(name: "mainUser", fields: [user_id], references: [id])
  favUser User @relation(name: "favUser", fields: [fav_user_id], references: [id])

  @@map("favorites")
}

model RecentRecipients {
  id Int @id @default(autoincrement())
  user_id Int 
  receiver_id Int
  frequency Int @default(1)
  lastSentAt DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], name: "senderUser")
  recipient User @relation(fields: [receiver_id], references: [id], name: "receiverUser")

  @@index([user_id])
  @@unique([user_id, receiver_id])
  @@map("recent_recipients")
}