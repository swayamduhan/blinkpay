// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.19.6
// source: packages/proto/bank-queue-proto/main.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "proto";

export interface AddTransactionRequest {
  token: string;
  success: boolean;
  type: string;
  amount: number;
}

export interface AddTransactionResponse {
  response: string;
}

function createBaseAddTransactionRequest(): AddTransactionRequest {
  return { token: "", success: false, type: "", amount: 0 };
}

export const AddTransactionRequest: MessageFns<AddTransactionRequest> = {
  encode(message: AddTransactionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.amount !== 0) {
      writer.uint32(32).int32(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddTransactionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddTransactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddTransactionRequest {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: AddTransactionRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddTransactionRequest>, I>>(base?: I): AddTransactionRequest {
    return AddTransactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddTransactionRequest>, I>>(object: I): AddTransactionRequest {
    const message = createBaseAddTransactionRequest();
    message.token = object.token ?? "";
    message.success = object.success ?? false;
    message.type = object.type ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseAddTransactionResponse(): AddTransactionResponse {
  return { response: "" };
}

export const AddTransactionResponse: MessageFns<AddTransactionResponse> = {
  encode(message: AddTransactionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.response !== "") {
      writer.uint32(10).string(message.response);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddTransactionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddTransactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.response = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddTransactionResponse {
    return { response: isSet(object.response) ? globalThis.String(object.response) : "" };
  },

  toJSON(message: AddTransactionResponse): unknown {
    const obj: any = {};
    if (message.response !== "") {
      obj.response = message.response;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddTransactionResponse>, I>>(base?: I): AddTransactionResponse {
    return AddTransactionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddTransactionResponse>, I>>(object: I): AddTransactionResponse {
    const message = createBaseAddTransactionResponse();
    message.response = object.response ?? "";
    return message;
  },
};

export type TransactionServiceService = typeof TransactionServiceService;
export const TransactionServiceService = {
  addTxnToQueue: {
    path: "/proto.TransactionService/AddTxnToQueue",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddTransactionRequest): Buffer =>
      Buffer.from(AddTransactionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): AddTransactionRequest => AddTransactionRequest.decode(value),
    responseSerialize: (value: AddTransactionResponse): Buffer =>
      Buffer.from(AddTransactionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AddTransactionResponse => AddTransactionResponse.decode(value),
  },
} as const;

export interface TransactionServiceServer extends UntypedServiceImplementation {
  addTxnToQueue: handleUnaryCall<AddTransactionRequest, AddTransactionResponse>;
}

export interface TransactionServiceClient extends Client {
  addTxnToQueue(
    request: AddTransactionRequest,
    callback: (error: ServiceError | null, response: AddTransactionResponse) => void,
  ): ClientUnaryCall;
  addTxnToQueue(
    request: AddTransactionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddTransactionResponse) => void,
  ): ClientUnaryCall;
  addTxnToQueue(
    request: AddTransactionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddTransactionResponse) => void,
  ): ClientUnaryCall;
}

export const TransactionServiceClient = makeGenericClientConstructor(
  TransactionServiceService,
  "proto.TransactionService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TransactionServiceClient;
  service: typeof TransactionServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
