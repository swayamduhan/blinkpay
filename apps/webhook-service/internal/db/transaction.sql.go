// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transaction.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addToWallet = `-- name: AddToWallet :one
UPDATE wallets 
SET balance = balance + $1
WHERE user_id = $2
RETURNING id, user_id, balance, updated_at
`

type AddToWalletParams struct {
	Balance pgtype.Numeric
	UserID  int32
}

func (q *Queries) AddToWallet(ctx context.Context, arg AddToWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, addToWallet, arg.Balance, arg.UserID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionByToken = `-- name: GetTransactionByToken :one
SELECT id, user_id, token, provider, operation_type, amount, status, created_at FROM bank_transactions
WHERE token=$1
`

func (q *Queries) GetTransactionByToken(ctx context.Context, token string) (BankTransaction, error) {
	row := q.db.QueryRow(ctx, getTransactionByToken, token)
	var i BankTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Provider,
		&i.OperationType,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE bank_transactions
SET status = $1
WHERE token = $2 AND status = 'PROCESSING'
RETURNING id, user_id, token, provider, operation_type, amount, status, created_at
`

type UpdateTransactionParams struct {
	Status TransactionStatus
	Token  string
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (BankTransaction, error) {
	row := q.db.QueryRow(ctx, updateTransaction, arg.Status, arg.Token)
	var i BankTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Provider,
		&i.OperationType,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
