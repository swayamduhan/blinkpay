// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type BankOperation string

const (
	BankOperationTOPUP      BankOperation = "TOPUP"
	BankOperationWITHDRAWAL BankOperation = "WITHDRAWAL"
)

func (e *BankOperation) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BankOperation(s)
	case string:
		*e = BankOperation(s)
	default:
		return fmt.Errorf("unsupported scan type for BankOperation: %T", src)
	}
	return nil
}

type NullBankOperation struct {
	BankOperation BankOperation
	Valid         bool // Valid is true if BankOperation is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBankOperation) Scan(value interface{}) error {
	if value == nil {
		ns.BankOperation, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BankOperation.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBankOperation) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BankOperation), nil
}

type TransactionStatus string

const (
	TransactionStatusPROCESSING TransactionStatus = "PROCESSING"
	TransactionStatusFAILED     TransactionStatus = "FAILED"
	TransactionStatusSUCCESS    TransactionStatus = "SUCCESS"
)

func (e *TransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatus(s)
	case string:
		*e = TransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatus: %T", src)
	}
	return nil
}

type NullTransactionStatus struct {
	TransactionStatus TransactionStatus
	Valid             bool // Valid is true if TransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionStatus), nil
}

type BankTransaction struct {
	ID            int64
	UserID        int32
	Token         string
	Provider      string
	OperationType BankOperation
	Amount        pgtype.Numeric
	Status        TransactionStatus
	CreatedAt     pgtype.Timestamp
}

type MagicLink struct {
	ID        int32
	UserID    int32
	Token     string
	ExpiresAt pgtype.Timestamp
}

type P2pTransaction struct {
	ID         int64
	SenderID   int32
	ReceiverID int32
	Amount     pgtype.Numeric
}

type User struct {
	ID            int32
	Name          string
	Email         string
	Password      string
	Phone         pgtype.Text
	EmailVerified bool
	CreatedAt     pgtype.Timestamp
}

type Wallet struct {
	ID        int32
	UserID    int32
	Balance   pgtype.Numeric
	UpdatedAt pgtype.Timestamp
}
